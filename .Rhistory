url<-"http://www.procyclingstats.com/rider/Christopher_Froome"
giro_table_nibali <- readHTMLTable(url, which = 1, header = TRUE)
giro_table_nibali <- readHTMLTable(url, which = 2, header = TRUE)
url_1 <- "http://www.procyclingstats.com/rider.php?id=140778&c=3&code=riderstats-grand-tour-starts"
giro_table_nibali <- readHTMLTable(url_1, which = 2, header = TRUE)
giro_table_nibali <- readHTMLTable(url_1, which = 1, header = TRUE)
giro_table_nibali
url<-"http://www.procyclingstats.com/rider.php?id=140869&season=2017"
giro_table_froome <- readHTMLTable(url, which = 1, header = TRUE)
giro_table_froome <- readHTMLTable(url, which = 4, header = TRUE)
giro_table_froome <- readHTMLTable(url, header = TRUE)
giro_table_froome
giro_table_froome(head)
head(giro_table_froome)
?named list
named list()
str(giro_table_nibali)
View(giro_table_nibali)
View(giro_table_nibali)
View(giro_table_nibali)
?readHTMLList()
install.packages("rvest")
library(rvest)
install.packages("str")
install.packages("rvest")
library(rvest)
tdf_stages_data <- read_html("http://www.procyclingstats.com/race.php?id=171088&c=4&code=event-event-all-stage-profiles")
tdf_stages_all <- tdf_stages_data %>% html_nodes("h3 + img")
str(tdf_stages_all)
tdf_stages_all
tdf_stages_all[[1]]
display(tdf_stages_all[[1]])
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("EBImage")
library(EBImage)
display(tdf_stages_all[[1]])
display(tdf_stages_all[1])
display(tdf_stages_all)
I1 <- readImage(tdf_stages_all[[1]])
I1 <- readImage(""http://www.procyclingstats.com/races/profilesmaps/201705/original/tour-de-france-2017-stage-1-1495791631.png")
I1 <- readImage("C:\Users\paresh1982\Downloads\tdf 2017 stages\races-profilesmaps-201705-original-tour-de-france-2017-stage-1-1495791631")
P <- c(2,4,7,8,4,)
P <- c(2,4,7,8,4)
avg <- function(q) {
mean(q)
avg <- function(q) {
mean(q)
}
avg(P)
avg(P)
P
avg <- function(q) {
mean(q)
}
P <- c(2,4,7,8,4)
avg(P)
tdf_riders_data <- read_html("http://www.procyclingstats.com/race.php?id=171088&c=3&code=startlist-riders-sorted-by-ranking&type=66&ApplyFilter=Filter")
tdf_riders_all <- tdf_stages_data %>% html_nodes(".content div:nth-child(5)")
tdf_riders_all
source('~/.active-rstudio-document', echo=TRUE)
store[[cost]]
store[["cost"]]
x <- matrix(1:4, nrow = 2, byrow = TRUE,
dimnames = list(c("A", "B"), c("P", "Q")))
rowMeans(x)
df <- data.frame(
x = c("m", "n"),
y = c(1, 4)
)
str(df)
df <- data.frame(
x = c("m", "n", "o"),
y = c(1, 4
str(df)
df <- data.frame(
x = c("m", "n", "o"),
y = c(1, 4))
df <- data.frame(
x = c("m", "n", "o"),
y = c(1, 4, 5)
)
str(df)
df <- data.frame(
x = c("mon", "tue", "wed"),
y = c(1, 4, 5)
)
str(df)
rowSums(x)
y <- c(10, 8, 14, 5, 2)
y[y == 5]
y <- 5:8
z <- 13:16
matrix(c(y, z), nrow = 2, byrow = TRUE)
nums <- list(
p = c(2, 4, 6),
q = c(21, 24, 27),
r = c(28, 32, 36)
)
nums[1]
nums["p"]
nums[[1]]
nums[["p"]]
nums[["p"]][2]
nums[["p"]][[2]]
nums[[1]][2]
nums[[1]][[2]]
nums[1][[2]]
nums[1][c(2,3)]
nums[[1]][c(2,3)]
nums[[1]][[c(2,3)]]
nums[[1]][c(2,3)]
nums[["p"]][c(2,3)]
nums <- data.frame(
p = c(2, 4, 6),
q = c(21, 24, 27),
r = c(28, 32, 36)
)
nums
nums[["p"]][c(2,3)]
nums[["p"]]
nums["p"]
nums[["p"]][[c(2,3)]]
nums[1]
nums[["p"]]
nums[[1]]
nums[["p"]][[c(2,3)]]
nums[["p"]][c(2,3)]
month <- list(
x = c("Mar", "Feb", "Jan"),
y = c("Aug", "Jul", "Sep")
)
month
month[y][2]
month["y"][2]
month$y[2]
month$y$2
month[["y"]][2]
nums <- dataframe(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
nums <- data.frame(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
nums$p[3]
nums$p
nums$p[c(1,3)]
nums <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
nums$p
str(nums)
nums$p
nums$p[c(1,3)]
x <- c(28, 13, 37)
x
x[order(x)]
order(x)
order(x, decreasing = TRUE)
x[order(x, decreasing = TRUE)]
df <- data.frame(
x = c(47, 13, 5, 46),
y = c("A", "B", "C", "D"),
z = c(34, 50, 22, 42)
)
idx <- order(df[[x]], decreasing = FALSE)
idx <- order(df[x], decreasing = FALSE)
idx <- order(df["x"], decreasing = FALSE)
idx
idx <- order(df[["x"]], decreasing = FALSE)
idx
x <- c("n", "n", "n", "s")
y <- factor(x)
y
levels(y) <- c("north", "south")
y
nums
nums <- data.frame(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
nums
nums[2, 3]
nums[1, ]
nums[, 1]
nums[, 2]
nums[2,]
nums[2, c(2,3)]
nums[c(2,3), 1]
multiply_n <- function(x, n = 1) {
y <- x + n
return(y)
}
z <- multiply_n(x = 5)
z
y
dates <- c("04.2014", "2010", "1995", "04-1990", "04-25-2012")
grep(pattern = "^[0-9]+.[0-9]+$", x = dates)
dates <- c("10-20-1990", "10-20-2014", "2012", "10.2010", "10-1995")
grep(pattern = "^[0-9]+.+[0-9]$", x = dates)
dates <- c("10-20-1990", "10-20-2014", "2012", "10.2010", "10-1995")
grep(pattern = "^[0-9]+\\.[0-9]+$", x = dates)
dates <- c("12-15-2010", "12-2012", "12.2014", "1995", "1990")
grep(pattern = "^[0-9]+\\.[0-9]+$", x = dates)
library(readr)
ex1data1 <- read_csv("C:/big data tutorial/Machine learning_Stanford/ex1/ex1data1.txt")
View(ex1data1)
library(readr)
ex1data1 <- read_csv("C:/big data tutorial/Machine learning_Stanford/ex1/ex1data1.txt", header = FALSE)
ex1data1
read.csv(tf, fill = TRUE) # 1 column
ncol <- max(count.fields(tf, sep = ","))
read.csv(tf, fill = TRUE, header = FALSE,
col.names = paste0("V", seq_len(ncol)))
library(readr)
ex1data1 <- read_csv("C:/big data tutorial/Machine learning_Stanford/ex1/ex1data1.txt", col_names = c("population", "profit"))
str(ex1data1)
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point()
model_1 <- lm(poplation ~ profit, data = ex1data1)
model_1 <- lm(population ~ profit, data = ex1data1)
model_1
predict(model_1, 35000)
model_1 <- lm(profit ~ population, data = ex1data1)
summary(model_1)
model_1
predict(model_1, 35000)
predict(model_1, 3.5)
predict(model_1, population = 3.5)
str(ex1data1)
test <- c(3.5, 7.0)
names(test) <- "population"
test
test <- matrix(c(3.5, 7.0), nrow = 2, byrow = TRUE)
test
colnames(test) <- "population"
test
predict(model_1, test)
test <- data.frame(test)
test
predict(model_1, test)
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point() + geom_abline(model_1)
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point() + geom_abline(aes(model_1))
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point() + geom_line(model_1)
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point()
abline(model_1)
ggplot(ex1data1, aes(x = population, y = profit)) + geom_point() + geom_abline(model_1$coefficients)
library(readr)
ex1data2 <- read_csv("C:/big data tutorial/Machine learning_Stanford/ex1/ex1data2.txt", col.names = c("size", "bedroom", "price"))
View(ex1data2)
library(readr)
ex1data2 <- read_csv("C:/big data tutorial/Machine learning_Stanford/ex1/ex1data2.txt", col_names = c("size", "bedroom", "price"))
View(ex1data2)
ex1_norm <- scale(ex1data2[, -3], center = TRUE, scale = TRUE)
head(ex1_norm)
ex1_norm <- cbind(ex1_norm, ex1data2$price)
head(ex1_norm)
names(ex1_norm)
names(ex1_norm)[3]<- "price"
head(ex1_norm)
(ex1_norm)[3]
ex1_norm <- scale(ex1data2[, -3], center = TRUE, scale = TRUE)
ex1_norm
ex1_norm <- data.frame(ex1_norm)
ex1_norm
ex1_norm <- cbind(ex1_norm, ex1data2$price)
ex1_norm
names(ex1_norm)[3]<- "price"
ex1_norm
mod_1 <- lm(price ~ size + bedroom, data = ex1_norm)
summary()
summary(mod_1)
library("purrr", lib.loc="~/R/win-library/3.3")
mu <- map_dbl(ex1data2, mean)
mu <- map_dbl(ex1data2[, -3], mean)
mu
std <- map_dbl(ex1data2[, -3], sd)
std
test
test <- data.frame(1650, 3)
test
test <- data.frame(c(1650, 3))
test
test <- data.frame(1650, 3)
names(test) <- c("size", "bedroom")
test
test <- test - mu
test
test <- test/std
test
predict(mod_1, test)
install.packages("Hmisc")
library("Hmisc", lib.loc="~/R/win-library/3.3")
set.seed(123)
XX <- rnorm(100)
smean.sdl(xx, mult = 1)
smean.sdl(XX, mult = 1)
smean.sdl(XX, mult = 2)
smean.cl.normal(XX)
smean.sd(XX)
vals <- c("medium", "low", "high", "low")
vals
vals_fct <- factor(vals, levels = c("low", "medium", "high"))
vals_fct
vals_fct[1] > vals_fct[3]
vals_fct[1]
vals_fct <- factor(vals, ordered = TRUE, levels = c("low", "medium", "high"))
vals_fct
vals_fct[1] > vals_fct[3]
library(dplyr)
df <- data.frame(
x = c(2, 1, 5),
y = c(6, 9, 8)
)
df
x <- c("Mar", "Mar", "Apr", "Feb", "Feb")
y <- factor(x)
summary(y)
y <- table(x)
summary(y)
table(x)
x <- c("Feb", "Feb", "Apr", "Apr", "Apr")
y <- factor(x)
factor(x)
count(y)
tally(y)
factor(y)
total(Y)
total(y)
sum(y)
library(readxl)
Packer_Details <- read_excel("C:/Users/paresh1982/Desktop/Packer Details.xlsx")
View(Packer_Details)
str(Packer_Details)
Packer_Details <- list(Packer_Details)
Packer_Details
unlist(Packer_Details)
Packer_Details <- data.frame(Packer_Details)
Packer_Details[2]
library("tidyr", lib.loc="~/R/win-library/3.3")
names(Packer_Details)
names(Packer_Details)[2] <- "Names"
Packer_Details %>% spread(Sr.no, Names)
Det <- Packer_Details %>% spread(Sr.no, Names)
Detea <- Packer_Details %>% spread(Sr.no, Names)
Detea
View(Packer_Details)
df <- data.frame(
x = c(47, 13, 5, 46),
y = c("A", "B", "C", "D"),
z = c(34, 50, 22, 42)
)
df
idx <- order(df$z, decreasing = TRUE)
idx
df[idx,]
lst <- list(p = c(18, 12, 20), q = c(11, 8, 10))
range(lst)
range(lst$p)
range(lst$q)
sapply(lst, range)
avengers <- list(
list("phil coulson", "nick fury"),
list("thor", "hulk")
)
avengers
safe_mean <- function(x) {
type <- class(x)
if(type == "character") {
stop("x must be a numeric/logical vector", call. = FALSE)
}
mean(x, na.rm = TRUE)
}
safe_mean(c("4", "5", "6"))
safe_mean(c(4, 5, 6))
safe_mean(c(T, F, T))
View(df)
install.packages("Lahman")
library(Lahman)
library(dplyr)
help("Lahman-package")
help("Lahman-package")
load(Master)
data("Master")
head(Master)
data("Batting")
head(Batting)
dim(Master)
dim(Batting)
length(unique(Batting$playerID))
length(unique(Master$playerID))
batting_left <- left_join(Batting, Master, by = "playerID")
head(batting_left)
batting_left[batting_left$nameFirst == "Barry",]
Master[Master$nameFirst == "Barry",]
head[batting_left]
head(batting_left)
batting_left[batting_left$playerID == "bondsba01",]
dim(batting_left[batting_left$playerID == "bondsba01",])
dim(batting_left[batting_left$playerID == "bondsba01", batting_left$HR])
batting_left[batting_left$playerID == "bondsba01", batting_left$HR]
batting_left[batting_left$playerID == "bondsba01", 12]
sum(batting_left[batting_left$playerID == "bondsba01", 12])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left[batting_left$nameFirst == "Barry",]
batting_left <- left_join(Batting, Master, by = "playerID")
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR))
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
head(HR_summary, 20)
data("Pitching")
head(Pitching)
dim(Pitching)
dim(Master)
pitching_left <- left_join(Pitching, Master, by = "playerID")
head(pitching_left)
length(unique(Pitching$playerID))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst)
%>%summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
data("AwardsPlayers")
AwardsPlayers %>% filter(awardID == "World Series MVP")
dim(AwardsPlayers %>% filter(awardID == "World Series MVP"))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(awardID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID")
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
?year
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
data(Master)
data("Batting")
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry",]
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry" & Master$nameLast = "Bonds",]
Master[(Master$nameFirst == "Barry" & Master$nameLast = "Bonds"),]
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst)
%>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
%>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
setwd("~/GitHub/Churn Prediction")
getwd()
